import { test } from 'uvu'
import * as assert from 'uvu/assert'

import {
	normalize, leaf, root, parent, join, match, matches, relative, remap, replace, compareBasic
} from '#wildstar'

import {
	match as imatch, matches as imatches, relative as irelative, remap as iremap, compareInsensitive
} from '#wildstar/insensitive'

test('normalize', () => {
	assert.is(normalize('/'), '/')
	assert.is(normalize('c:/'), 'c:')

	assert.is(normalize('foo/bar'), 'foo/bar')
	assert.is(normalize('foo//bar'), 'foo/bar')
	assert.is(normalize('foo/bar/../baz'), 'foo/baz')
	assert.is(normalize('foo/./bar'), 'foo/bar')
	assert.is(normalize('foo/bar/.'), 'foo/bar')
	assert.is(normalize('foo/bar/..'), 'foo')

	assert.is(normalize('foo/../..'), '..')

	assert.is(normalize('/foo/../..'), '/')
	assert.is(normalize('c:/../..'), 'c:')
	assert.is(normalize('/../..'), '/')

	assert.is(normalize('./foo'), 'foo')
	assert.is(normalize('foo\\bar\\baz\\'), 'foo/bar/baz')
	assert.is(normalize(''), '')
	assert.is(normalize('/foo/bar'), '/foo/bar')
	assert.is(normalize('../foo/bar'), '../foo/bar')
})

test('root', () => {
	assert.is(root('/foo/bar'), '/')
	assert.is(root('c:/foo/bar'), 'c:')
	assert.is(root('foo/bar'), '')
})

test('leaf', () => {
	assert.is(leaf('/'), '')
	assert.is(leaf('c:/'), '')
	assert.is(leaf('/foo.txt'), 'foo.txt')
	assert.is(leaf('c:/foo.txt'), 'foo.txt')
	assert.is(leaf('bar/foo.txt'), 'foo.txt')
})

test('parent', () => {
	assert.is(parent('/'), '/')
	assert.is(parent('c:/'), 'c:')
	assert.is(parent('/foo.txt'), '/')
	assert.is(parent('c:/foo.txt'), 'c:')
	assert.is(parent('bar/foo.txt'), 'bar')
	assert.is(parent('foo.txt'), '')
})

test('join', () => {
	assert.is(join('foo', 'bar', 'baz'), 'foo/bar/baz')
	assert.is(join('/foo', 'bar', 'baz'), '/foo/bar/baz')
	assert.is(join('c:/foo', 'bar', 'baz'), 'c:/foo/bar/baz')
	assert.is(join('foo', '/bar', 'baz'), '/bar/baz')
	assert.is(join('foo', 'c:/bar', 'baz'), 'c:/bar/baz')
	assert.is(join('', 'foo', '', 'bar'), 'foo/bar')
	assert.is(join('foo', '.', 'bar'), 'foo/bar')
	assert.is(join('foo', 'bar', '..', 'baz'), 'foo/baz')
})

test('relative/irelative', () => {
	assert.is(relative('foo/bar/baz', 'foo/bar'), 'baz')
	assert.is(relative('c:/foo/bar/baz', 'c:'), 'foo/bar/baz')
	assert.is(relative('foo/bar', 'baz'), null)
	assert.is(relative('/foo/bar', '/foo'), 'bar')
	assert.is(relative('c:/foo/bar', 'c:/foo'), 'bar')
	assert.is(relative('foo/Bar/baz', 'foo/*'), 'baz')
	assert.is(irelative('Foo/Bar/Baz', 'foo/bar'), 'Baz')
	assert.is(irelative('Foo/Bar', 'foo'), 'Bar')
})

test('matches exact string', () => {
	assert.ok(matches('hello', 'hello'))
	assert.not(matches('hello', 'world'))
})

test('matches with * wildcard', () => {
	assert.ok(matches('hello', 'h*o'))
	assert.ok(matches('hello', '*'))
	assert.ok(imatches('HELLO', 'hel*'))

	assert.not(matches('hello', 'h*l*z'))
})

test('matches with *+ (one or more)', () => {
	assert.ok(matches('hello', 'h*+o'))
	assert.not(matches('ho', 'h*+o'))
	assert.ok(matches('hllo', 'h*+o'))
})

test('captures with *', () => {
	assert.equal(match('hello', 'h*o'), ['ell'])
	assert.equal(match('hello', '*'), ['hello'])
	assert.is(match('hello', 'h*l*z'), null)
})

test('replace with captures', () => {
	const caps = match('hello', 'h*o')
	assert.is(replace('X<1>Y', caps), 'XellY')
	assert.throws(() => replace('X<2>Y', caps))
	assert.throws(() => replace('X<abc>Y', caps))
	assert.throws(() => replace('X<1Y', caps))
})

test('remap works', () => {
	assert.is(remap('hello', 'h*o', 'X<1>Y'), 'XellY')
	assert.is(remap('hello', 'h*z', 'X<1>Y'), null)
})

test('unicode support', () => {
	assert.ok(matches('h√©llo', 'h*o'))
	assert.equal(match('h√©llo', 'h*o'), ['√©ll'])
})

test('matches and captures with multiple *', () => {
	assert.ok(matches('foobar', '*o*b*'))
	assert.equal(match('foobar', '*o*b*'), ['f', 'o', 'ar'])
	assert.equal(match('abc123xyz', '*1*3*'), ['abc', '2', 'xyz'])
})

test('matches and captures with multiple *+', () => {
	assert.ok(matches('aabbcc', '*+b*+c*'))
	assert.equal(match('aabbcc', '*+b*+c*'), ['aa', 'b', 'c'])
	assert.equal(match('xxxyyyzzz', '*+y*+z*'), ['xxx', 'yy', 'zz'])
})

test('captures with adjacent * should discard previous *', () => {
	assert.equal(match('abc', '**'), ['abc'])
	assert.equal(match('abc', 'abc*+*'), [''])
})

test('captures with * at start and end', () => {
	assert.equal(match('middle', '*d*'), ['mi', 'dle'])
	assert.equal(match('wildstar', '*l*s*'), ['wi', 'd', 'tar'])
})

test('captures greedily', () => {
	assert.equal(match('aaaabbbb', '*b'), ['aaaabbb'])
})

test('caseInsensitiveCompare: compares Unicode code points case-insensitively (locale-aware)', () => {
	// German sharp S
	assert.is(compareInsensitive('√ü'.codePointAt(0), '·∫û'.codePointAt(0)), true) // '√ü' vs '·∫û'
	// Greek sigma
	assert.is(compareInsensitive('Œ£'.codePointAt(0), 'œÇ'.codePointAt(0)), false) // 'Œ£' vs 'œÇ' (contextual, fails at code point level)
	// False case
	assert.is(compareInsensitive('ƒ∞'.codePointAt(0), 'I'.codePointAt(0)), false) // 'ƒ∞' vs 'I'
})

test('caseInsensitiveCompare: works with matches/match for case-insensitive Unicode patterns', () => {
	assert.equal(match('stra√üe', 'STR*E', compareInsensitive), ['a√ü'])
	assert.is(matches('ŒúŒ¨ŒπŒøœÇ', 'Œº*Œ£', compareInsensitive), false)
})

test('insensitive path matching', () => {
	assert.equal(imatch('C:/USERS/FILE.TXT', 'c:/*/file.txt'), ['USERS'])

	assert.equal(imatch('C:/USERS/FILE.TXT', 'c:/*/*.txt'), ['USERS', 'FILE'])
	assert.equal(imatch('C:/USERS/Kamicane/FILE.TXT', 'c:/**'), ['USERS/Kamicane/FILE.TXT'])

	assert.equal(imatch('C:/USERS/KAMICANE/APPDATA/FILE.TXT', 'c:/**/KAMICANE/**/*.txt'), ['USERS', 'APPDATA', 'FILE'])

	assert.equal(imatch('C:/USERS/Kamicane/FILE.TXT', 'c:/**/*.txt'), ['USERS/Kamicane', 'FILE'])

	assert.equal(imatch('C:/USERS/Kamicane/FILE.TXT', '**/c:/**'), ['', 'USERS/Kamicane/FILE.TXT'])

	assert.equal(imatch('–ñ–ñ:/√úsers/∆íile.txt', '–ñ–ñ:/*/∆ëILE.tXt'), ['√úsers'])
})

// the following test cases are kinda shit because a stupid friend of mine coded them. his name is gpt.
// works for now but could use a cleanup (lots of useless and duplicated tests)

test('utf8 path matching 1', () => {
	assert.ok(match('C:/√úsers/∆íile.txt', 'C:/√úsers/∆íile.txt'))
	assert.equal(match('AB:/√úsers/∆íile.txt', 'AB:/*ers/∆íile.txt'), ['√ús'])
	assert.equal(match('Œî:/√úsers/∆íile.txt', 'Œî:/√ús*/∆íile.txt'), ['ers'])

	assert.is(match('C:/√úsers/∆íile.txt', 'C:/*'), null)
	assert.equal(match('C:/√úsers/üòÄile.txt', 'C:/**'), ['√úsers/üòÄile.txt'])
	assert.equal(match('füòäo/bar/baz.txt', '**'), ['füòäo/bar/baz.txt'])
	assert.is(match('Œî:/√úsers/∆íile.txt', 'D:/√úsers/∆íile.txt'), null)
	assert.equal(match('AA:/Œ±Œ≤Œ≥/bar.txt', 'AA:/*/bar.txt'), ['Œ±Œ≤Œ≥'])
	assert.equal(match('ZZ:/∆í√∏√∏/bar.txt', 'ZZ:/*/bar.txt'), ['∆í√∏√∏'])
	assert.equal(match('Œî:/Êº¢Â≠ó/bar.txt', 'Œî:/*/bar.txt'), ['Êº¢Â≠ó'])
})

test('utf8 path matching 2', () => {
	assert.equal(match('–ñ–ñ:/–¥–æ–±—Ä–æ/bar.txt', '–ñ–ñ:/*/bar.txt'), ['–¥–æ–±—Ä–æ'])
	assert.equal(match('C:/caf√©/bar.txt', 'C:/*/bar.txt'), ['caf√©'])
	assert.equal(match('üòÄ:/smüòäl/bar.txt', 'üòÄ:/*/bar.txt'), ['smüòäl'])
	assert.equal(match('üöó:/üöïüöô/bar.txt', 'üöó:/*/bar.txt'), ['üöïüöô'])
	assert.equal(match('ü¶Ñ:/unicü¶Ñrn/bar.txt', 'ü¶Ñ:/*/bar.txt'), ['unicü¶Ñrn'])
	assert.equal(match('üöóüöï:/üöô/bar.txt', 'üöóüöï:/*/bar.txt'), ['üöô'])
	assert.equal(match('ABüöó:/fooüòÄ/bar.txt', 'ABüöó:/*/bar.txt'), ['fooüòÄ'])
	assert.equal(match('üöóAB:/barü¶Ñ/bar.txt', 'üöóAB:/*/bar.txt'), ['barü¶Ñ'])
	assert.equal(match('AüöóB:/Œ≤Œ≥Œ¥/bar.txt', 'AüöóB:/*/bar.txt'), ['Œ≤Œ≥Œ¥'])
	assert.equal(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Éê„Éº.txt', 'Êó•Êú¨:/*/„Éê„Éº.txt'), ['„Åµ„Åâ„Åä'])
	assert.equal(match('Êó•Êú¨Ë™û:/„ÉÜ„Çπ„Éà/„Éê„Éº.txt', 'Êó•Êú¨Ë™û:/*/„Éê„Éº.txt'), ['„ÉÜ„Çπ„Éà'])
	assert.equal(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Å∞„Éº.txt', 'Êó•Êú¨:/*/„Å∞„Éº.txt'), ['„Åµ„Åâ„Åä'])
	assert.equal(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Å∞„Éº.txt', 'Êó•Êú¨:/*/*.txt'), ['„Åµ„Åâ„Åä', '„Å∞„Éº'])
	assert.equal(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Å∞„Éº.txt', 'Êó•Êú¨:/*/*.*'), ['„Åµ„Åâ„Åä', '„Å∞„Éº', 'txt'])
})

test('utf8 path matching 3', () => {
	assert.is(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Å∞„Éº.txt', 'Êó•Êú¨:/*/b*.*'), null)
	assert.equal(match('Êó•Êú¨:/„Åµ„Åâ„Åä/„Å∞„Éº.txt', 'Êó•Êú¨:/**'), ['„Åµ„Åâ„Åä/„Å∞„Éº.txt'])
	assert.equal(match('üöó:/foo/bar/baz.txt', 'üöó:/**/baz.txt'), ['foo/bar'])
	assert.equal(match('f√∂√∂.txt', '*.txt'), ['f√∂√∂'])
	assert.equal(match('f√∂√∂.txt', 'f√∂√∂.*'), ['txt'])
	assert.equal(match('f√≥lder/∆íile.txt', 'f√≥lder/*.txt'), ['∆íile'])
	assert.equal(match('f√≥lder/∆íile.txt', '*/∆íile.txt'), ['f√≥lder'])
	assert.equal(match('f√≥lder/∆íile.txt', 'f√≥lder/*.*'), ['∆íile', 'txt'])
	assert.equal(match('f√≥lder/∆íile.txt', '*/*.*'), ['f√≥lder', '∆íile', 'txt'])
	assert.equal(match('f√≥lder/∆íile.txt', 'f*/∆í*.*xt'), ['√≥lder', 'ile', 't'])
	assert.is(match('f√∂√∂.txt', '*.cpp'), null)
	assert.is(match('f√∂√∂.txt', 'bar.*'), null)
	assert.is(match('f√∂√∂.txt', '*o.tx'), null)
	assert.is(match('f√≥lder/∆íile.txt', 'f√≥lder/*.cpp'), null)
	assert.is(match('f√≥lder/∆íile.txt', '*/bar.txt'), null)
	assert.is(match('f√≥lder/∆íile.txt', '*/*.cpp'), null)
	assert.is(match('f√≥lder/∆íile.txt', 'f*/b*.*'), null)
	assert.equal(match('/f√∂√∂/bar', '**/f√∂√∂/bar'), [''])
	assert.equal(match('Œî:/f√∂√∂/bar', '**/f√∂√∂/bar'), ['Œî:'])
})

test('utf8 path matching 4', () => {
	assert.equal(match('AA:/f√∂√∂/bar', '**/f√∂√∂/bar'), ['AA:'])
	assert.equal(match('f√∂√∂/bar', '**/f√∂√∂/bar'), [''])
	assert.equal(match('f√∂√∂/bar', '**/bar'), ['f√∂√∂'])
	assert.is(match('f√∂√∂/bar', '**/f√∂√∂'), null)
	assert.equal(match('/f√∂√∂/bar', '/f√∂√∂/**'), ['bar'])
	assert.equal(match('Œî:/f√∂√∂/bar/baz', 'Œî:/f√∂√∂/**'), ['bar/baz'])
	assert.equal(match('f√∂√∂/bar/baz', 'f√∂√∂/**'), ['bar/baz'])
	assert.equal(match('f√∂√∂/bar/baz', 'f√∂√∂/bar/**'), ['baz'])
	assert.equal(match('f√∂√∂/bar/baz', 'f√∂√∂/bar/baz/**'), [''])
	assert.equal(match('/f√∂√∂/bar/baz/qux', '/f√∂√∂/**/qux'), ['bar/baz'])
	assert.equal(match('Œî:/f√∂√∂/bar/baz/qux', 'Œî:/f√∂√∂/**/qux'), ['bar/baz'])
	assert.equal(match('f√∂√∂/bar/baz/qux', 'f√∂√∂/**/qux'), ['bar/baz'])
	assert.equal(match('f√∂√∂/bar/baz/qux', 'f√∂√∂/**/baz/qux'), ['bar'])
})

test('utf8 path matching 5', () => {
	assert.equal(match('f√∂√∂/bar/baz/qux/abc/üòÄef/ghi', 'f√∂√∂/**/qux/**/üòÄef/ghi'), ['bar/baz', 'abc'])
	assert.equal(match('Œî:/a/b/c/d/e/f/g/h', 'Œî:/**/c/**/g/h'), ['a/b', 'd/e/f'])
	assert.is(match('f√∂√∂/bar/baz/qux', 'f√∂√∂/**/notqux'), null)
	assert.equal(match('f√∂√∂/qux', 'f√∂√∂/**/qux'), [''])
	assert.is(match('f√∂√∂/qux', 'f√∂√∂/**+/qux'), null)
	assert.equal(match('f√∂√∂/bar', 'f√∂√∂/**'), ['bar'])
	assert.is(match('f√∂√∂/bar', 'f√∂√∂/bar/**+'), null)
	assert.equal(match('f√∂√∂/bar/baz', 'f√∂√∂/bar/**+'), ['baz'])
	assert.equal(match('AA:/f√∂√∂/bar/baz', '*:/f√∂√∂/**'), ['AA', 'bar/baz'])
	assert.equal(match('Œî:/f√∂√∂/bar/baz', '*:/f√∂√∂/**'), ['Œî', 'bar/baz'])
	assert.equal(match('Œî:/f√∂√∂/bar/baz', '**:/f√∂√∂/**'), ['Œî', 'bar/baz']) // invalid **: gets transformed to *:
	assert.equal(match('C:/f√∂√∂/bar/baz', 'C:/**/baz'), ['f√∂√∂/bar'])
	assert.is(match('C:/f√∂√∂/bar/baz', 'C:/**/notbaz'), null)
	assert.is(match('/f√∂√∂/bar', 'f√∂√∂/bar'), null)
	assert.is(match('f√∂√∂/bar', '/f√∂√∂/bar'), null)
	assert.equal(match('f√≥lder/nested1/nested2/∆íile.txt', 'f√≥lder/**/∆íile.txt'), ['nested1/nested2'])
})

test.run()
